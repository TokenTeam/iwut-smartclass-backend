name: Deploy Production Environment
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
jobs:
  launch:
    environment: production
    name: Launch EC2 build instance
    runs-on: ubuntu-latest
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Launch EC2 instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.AWS_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.AWS_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }}
          echo "INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.AWS_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)" >> $GITHUB_ENV
      - name: Wait for SSH
        run: |
          while ! nc -z ${{ env.INSTANCE_IP }} 22; do
            echo "Waiting for SSH..."
            sleep 5
          done
  publish:
    needs: launch
    environment: production
    name: Build and push docker image
    runs-on: aws-01_builder
    steps:
      - name: register job
        run: |
          curl http://127.0.0.1:8080/Action/SetAction?task=${{ github.run_id }}
      - name: docker setup
        uses: docker/setup-docker-action@v4.3.0
      - name: docker login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
      - name: checkout
        uses: actions/checkout@v4
      - name: docker build
        run: |
          docker build . \
            --build-arg PORT="${{ vars.PORT }}" \
            --build-arg DEBUG="${{ vars.DEBUG }}" \
            --build-arg DATABASE="${{ secrets.DATABASE }}" \
            --build-arg TENCENT_SECRET_ID="${{ secrets.TENCENT_SECRET_ID }}" \
            --build-arg TENCENT_SECRET_KEY="${{ secrets.TENCENT_SECRET_KEY }}" \
            --build-arg BUCKET_URL="${{ secrets.BUCKET_URL }}" \
            --build-arg OPENAI_ENDPOINT="${{ vars.OPENAI_ENDPOINT }}" \
            --build-arg OPENAI_KEY="${{ secrets.OPENAI_KEY }}" \
            --build-arg OPENAI_MODEL="${{ vars.OPENAI_MODEL }}" \
            --file "${{ vars.DOCKER_FILE }}" --tag "${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }}"
      - name: docker tag
        run: docker tag ${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }} ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }}
      - name: docker push
        run: docker push ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }}
      - name: unregister job
        run: |
          curl http://127.0.0.1:8080/Action/StopAction?task=${{ github.run_id }}
  deploy:
    needs: publish
    environment: production
    runs-on: sh-05_gateway
    steps:
      - name: docker login
        run: |
          sudo docker login ${{ secrets.DOCKER_REGISTRY }} --username=${{ secrets.DOCKER_REGISTRY_USERNAME }} --password=${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: docker pull
        run: |
          sudo docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }}
      - name: Deploy with Docker run
        run: |
          sudo docker stop ${{ vars.DOCKER_CONTAINER_NAME }} || true
          sudo docker rm ${{ vars.DOCKER_CONTAINER_NAME }} || true
          sudo docker run -d --name ${{ vars.DOCKER_CONTAINER_NAME }} -p ${{ vars.DOCKER_CONTAINER_PORT }}:8080 ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.run_id }}
          sudo docker logout ${{ secrets.DOCKER_REGISTRY }}